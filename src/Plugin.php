<?php

/**
 * This file is part of vBuilder Framework (vBuilder FW).
 *
 * Copyright (c) 2011 Adam Staněk <adam.stanek@v3net.cz>
 *
 * For more information visit http://www.vbuilder.cz
 *
 * vBuilder FW is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * vBuilder FW is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with vBuilder FW. If not, see <http://www.gnu.org/licenses/>.
 */

namespace vBuilder\Composer;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\Script\ScriptEvents;
use Composer\Script\Event;
use Composer\Util\Filesystem;
use Composer\Package\AliasPackage;
use Composer\Package\BasePackage;
use Composer\Package\RootPackage;

/**
 * Composer plugin for vBuilder libraries
 *
 * Reads extra.vbuilder settings from composer.json.
 *
 * @author Adam Staněk (velbloud)
 * @since Jun 5, 2014
 */
class Plugin implements PluginInterface, EventSubscriberInterface {

	/** @var Composer */
	private $composer;

	/** @var IOInterface */
	private $io;

	/** @var FileSystem */
	private $fs;

	public function activate(Composer $composer, IOInterface $io) {
		$this->composer = $composer;
		$this->io = $io;
		$this->fs = new FileSystem;
	}

	public static function getSubscribedEvents() {
		return array(
			ScriptEvents::POST_AUTOLOAD_DUMP => 'onPostAutoloadDump',
		);
	}

	/**
	 * Returns all installed packages (including root) which have
	 * defined extra.vbuilder options
	 *
	 * @return array
	 */
	private function getPackages() {

		$ourPackages = array();

		// Dependencies
		$installedPackages = $this->composer->getRepositoryManager()
			->getLocalRepository()->getPackages();

		// Root package
		array_unshift($installedPackages, $this->composer->getPackage());

		foreach($installedPackages as $pkg) {
			$extra = $pkg->getExtra();
			if(isset($extra['vbuilder'])) {

				// Resolve aliases
				while($pkg instanceof AliasPackage)
					$pkg = $pkg->getAliasOf();

				if(!in_array($pkg, $ourPackages))
					$ourPackages[] = $pkg;
			}
		}

		return $ourPackages;
	}

	/**
	 * Returns absolute path to root package
	 *
	 * @param Package
	 * @return string
	 */
	private function getBasePath() {
		return $this->fs->normalizePath(realpath('.'));
	}

	/**
	 * Returns absolute path to given package
	 *
	 * @param Package
	 * @return string
	 */
	private function getInstallPath(BasePackage $package) {
		return ($package instanceof RootPackage)
			? $this->getBasePath()
			: $this->composer->getInstallationManager()->getInstallPath($package);
	}

	/**
	 * On Autoloader dump
	 *
	 * @param Event
	 */
	public function onPostAutoloadDump(Event $event) {

		$fs = $this->fs;
		$config = $this->composer->getConfig();

		$basePath = $this->getBasePath();
		$vendorDirPath = $fs->normalizePath(realpath($config->get('vendor-dir')));

		foreach($this->getPackages() as $pkg) {

			$installPath = $this->getInstallPath($pkg);

			// Check for fake autoloader-files
			$extra = $pkg->getExtra();
			if(isset($extra['vbuilder']['fake-autoloader-files'])) {
				$files = (array) $extra['vbuilder']['fake-autoloader-files'];
				foreach($files as $path) {
					$bootstrapDirPath = $fs->normalizePath($installPath . '/' . dirname($path));
					if(!is_dir($bootstrapDirPath)) continue;

					$relativePath = $fs->findShortestPath($bootstrapDirPath, $vendorDirPath, TRUE);
					$autoloadPath = var_export('/' . rtrim($relativePath, '/') . '/autoload.php', TRUE);

					$content = <<<BOOTSTRAP_END
<?php

/**
 * @warning This file is automatically generated by Composer.
 * @see https://github.com/vbuilder/composer-plugin
 */

return include __DIR__ . $autoloadPath;

BOOTSTRAP_END
;

					file_put_contents($autoloadFile = $bootstrapDirPath . '/' . basename($path), $content);
					$this->io->write('Generating fake autoload in: ' . $fs->findShortestPath($basePath, $autoloadFile));
				}
			}
		}
	}
}